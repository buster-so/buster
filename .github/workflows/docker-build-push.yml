name: Build and Push Docker Images

on:
  push:
    branches: [main, staging]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/docker-build-push.yml'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [staging]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/docker-build-push.yml'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force a build even without changes'
        required: false
        default: 'false'

# Only one build per ref at a time, queue others
concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: false

env:
  REGISTRY: ghcr.io

jobs:
  # Build API (Rust)
  build-api:
    runs-on: blacksmith-16vcpu-ubuntu-2404
    permissions:
      contents: read
      packages: write
    outputs:
      sha_short: ${{ steps.meta.outputs.sha_short }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Builder
        uses: useblacksmith/setup-docker-builder@v1
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata and determine tags
        id: meta
        run: |
          SHA_SHORT=$(git rev-parse --short=7 HEAD)
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          
          # Read version from Cargo.toml if on main
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            VERSION=$(grep '^version' apps/api/Cargo.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/' || echo "")
            if [ -n "$VERSION" ]; then
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Determine tags based on context
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tags=${{ env.REGISTRY }}/buster-so/buster-api:preview-${SHA_SHORT}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            TAGS="${{ env.REGISTRY }}/buster-so/buster-api:${SHA_SHORT},${{ env.REGISTRY }}/buster-so/buster-api:latest"
            if [ -n "$VERSION" ]; then
              TAGS="${TAGS},${{ env.REGISTRY }}/buster-so/buster-api:${VERSION}"
            fi
            echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "tags=${{ env.REGISTRY }}/buster-so/buster-api:staging-${SHA_SHORT},${{ env.REGISTRY }}/buster-so/buster-api:staging" >> $GITHUB_OUTPUT
          fi
          
          echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      - name: Build and push API Docker image
        uses: useblacksmith/build-push-action@v2
        with:
          context: ./apps/api
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.timestamp }}
          build-args: |
            COMMIT_SHA=${{ steps.meta.outputs.sha_short }}
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}
          platforms: linux/amd64
      
      - name: Output image details
        run: |
          echo "âœ… API Docker image built and pushed!"
          echo "ðŸ“¦ Image tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/   - /'

  # Build Server (TypeScript/Bun)
  build-server:
    runs-on: blacksmith-8vcpu-ubuntu-2404
    permissions:
      contents: read
      packages: write
    outputs:
      sha_short: ${{ steps.meta.outputs.sha_short }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node and pnpm for Turbo cache
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
      
      - name: Mount Turbo cache sticky disk
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-turbo-cache-${{ github.ref_name }}
          path: .turbo
      
      - name: Mount pnpm store sticky disk
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-pnpm-store-${{ github.ref_name }}
          path: ~/.pnpm-store
      
      - name: Configure pnpm store path
        run: pnpm config set store-dir ~/.pnpm-store
      
      - name: Mount Docker buildkit sticky disk
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-buildkit-cache-server-${{ github.ref_name }}
          path: /tmp/.buildkit-cache-server
      
      - name: Set up Docker Builder with cache
        uses: useblacksmith/setup-docker-builder@v1
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
          buildkitd-flags: --allow-insecure-entitlement network.host
          cache-binary: true
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata and determine tags
        id: meta
        run: |
          SHA_SHORT=$(git rev-parse --short=7 HEAD)
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          
          # Read version from package.json if on main
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            VERSION=$(jq -r '.version // empty' apps/server/package.json || echo "")
            if [ -n "$VERSION" ]; then
              echo "version=${VERSION}" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Determine tags based on context
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "tags=${{ env.REGISTRY }}/buster-so/buster-server:preview-${SHA_SHORT}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            TAGS="${{ env.REGISTRY }}/buster-so/buster-server:${SHA_SHORT},${{ env.REGISTRY }}/buster-so/buster-server:latest"
            if [ -n "$VERSION" ]; then
              TAGS="${TAGS},${{ env.REGISTRY }}/buster-so/buster-server:${VERSION}"
            fi
            echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            echo "tags=${{ env.REGISTRY }}/buster-so/buster-server:staging-${SHA_SHORT},${{ env.REGISTRY }}/buster-so/buster-server:staging" >> $GITHUB_OUTPUT
          fi
          
          echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      - name: Build and push Server Docker image
        uses: useblacksmith/build-push-action@v2
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.timestamp }}
          build-args: |
            COMMIT_SHA=${{ steps.meta.outputs.sha_short }}
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}
            TURBO_TOKEN=${{ secrets.TURBO_TOKEN }}
            TURBO_TEAM=${{ vars.TURBO_TEAM }}
          platforms: linux/amd64
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/buster-so/buster-server:buildcache
            type=local,src=/tmp/.buildkit-cache-server
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/buster-so/buster-server:buildcache,mode=max
            type=local,dest=/tmp/.buildkit-cache-server,mode=max
      
      - name: Output image details
        run: |
          echo "âœ… Server Docker image built and pushed!"
          echo "ðŸ“¦ Image tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/   - /'

  # Deploy API preview
  deploy-preview-api:
    if: github.event_name == 'pull_request' && github.base_ref == 'staging'
    needs: [build-api]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup porter
      uses: porter-dev/setup-porter@v0.1.0
    
    - name: Deploy API preview
      timeout-minutes: 30
      run: |
        SHA_SHORT="${{ needs.build-api.outputs.sha_short }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        
        echo "ðŸš€ Deploying API preview for PR #${PR_NUMBER} (SHA: ${SHA_SHORT})"
        
        cat > /tmp/porter-api.yaml <<EOF
        version: v2
        name: staging
        services:
        - name: api
          run: ""
          type: web
          image:
            repository: ghcr.io/buster-so/buster-api
            tag: preview-${SHA_SHORT}
          instances: 1
          cpuCores: 1
          ramMegabytes: 2048
          port: 3001
        envGroups:
        - staging
        EOF
        
        porter apply -f /tmp/porter-api.yaml --preview
        echo "âœ… API preview deployment initiated"
      env:
        PORTER_CLUSTER: 3155
        PORTER_HOST: https://dashboard.porter.run
        PORTER_PROJECT: 9309
        PORTER_APP_NAME: staging
        PORTER_TAG: preview-${{ needs.build-api.outputs.sha_short }}
        PORTER_TOKEN: ${{ secrets.PORTER_APP_9309_3155 }}
        PORTER_PR_NUMBER: ${{ github.event.pull_request.number }}
        PORTER_REPO_NAME: ${{ github.event.repository.name }}

  # Deploy Server preview
  deploy-preview-server:
    if: github.event_name == 'pull_request' && github.base_ref == 'staging'
    needs: [build-server]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup porter
      uses: porter-dev/setup-porter@v0.1.0
    
    - name: Deploy Server preview
      timeout-minutes: 30
      run: |
        SHA_SHORT="${{ needs.build-server.outputs.sha_short }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        
        echo "ðŸš€ Deploying Server preview for PR #${PR_NUMBER} (SHA: ${SHA_SHORT})"
        
        cat > /tmp/porter-server.yaml <<EOF
        version: v2
        name: staging-server
        services:
        - name: server
          run: ""
          type: web
          image:
            repository: ghcr.io/buster-so/buster-server
            tag: preview-${SHA_SHORT}
          instances: 1
          cpuCores: 2
          ramMegabytes: 5000
          port: 3002
        envGroups:
        - staging
        EOF
        
        porter apply -f /tmp/porter-server.yaml --preview
        echo "âœ… Server preview deployment initiated"
      env:
        PORTER_CLUSTER: 3155
        PORTER_HOST: https://dashboard.porter.run
        PORTER_PROJECT: 9309
        PORTER_APP_NAME: staging-server
        PORTER_TAG: preview-${{ needs.build-server.outputs.sha_short }}
        PORTER_TOKEN: ${{ secrets.PORTER_APP_9309_3155 }}
        PORTER_PR_NUMBER: ${{ github.event.pull_request.number }}
        PORTER_REPO_NAME: ${{ github.event.repository.name }}

  # Deploy Electric server preview
  deploy-preview-electric:
    if: github.event_name == 'pull_request' && github.base_ref == 'staging'
    needs: [build-server]  # Electric depends on the main build completing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup porter
      uses: porter-dev/setup-porter@v0.1.0
    
    - name: Deploy Electric server preview
      timeout-minutes: 30
      run: |
        SHA_SHORT="${{ needs.build-server.outputs.sha_short }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        
        echo "ðŸš€ Deploying Electric preview for PR #${PR_NUMBER} (SHA: ${SHA_SHORT})"
        
        porter apply -f ./apps/electric-server/porter.yaml --preview
        echo "âœ… Electric preview deployment initiated"
      env:
        PORTER_CLUSTER: 3155
        PORTER_HOST: https://dashboard.porter.run
        PORTER_PROJECT: 9309
        PORTER_APP_NAME: electric
        PORTER_TAG: ${{ needs.build-server.outputs.sha_short }}
        PORTER_TOKEN: ${{ secrets.PORTER_APP_9309_3155 }}
        PORTER_PR_NUMBER: ${{ github.event.pull_request.number }}
        PORTER_REPO_NAME: ${{ github.event.repository.name }}

  # Summary job to report all preview deployments
  deploy-preview-summary:
    if: github.event_name == 'pull_request' && github.base_ref == 'staging'
    needs: [deploy-preview-api, deploy-preview-server, deploy-preview-electric]
    runs-on: ubuntu-latest
    
    steps:
    - name: Output deployment summary
      run: |
        echo "## ðŸŽ‰ All Preview Deployments Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **PR:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA:** ${{ needs.deploy-preview-api.needs[0] == 'build-api' && needs.build-api.outputs.sha_short || needs.build-server.outputs.sha_short }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Services deployed:**" >> $GITHUB_STEP_SUMMARY
        echo "  - âœ… API" >> $GITHUB_STEP_SUMMARY
        echo "  - âœ… Server" >> $GITHUB_STEP_SUMMARY
        echo "  - âœ… Electric" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ”— Check Porter dashboard for deployment URLs" >> $GITHUB_STEP_SUMMARY

  # Deploy to staging/main environments on merge
  deploy-staging-main:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main')
    needs: [build-api, build-server]
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    
    steps:
    - name: Setup porter
      uses: porter-dev/setup-porter@v0.1.0
    
    - name: Determine image tag
      id: tag
      run: |
        SHA_SHORT="${{ needs.build-server.outputs.sha_short }}"
        
        if [[ "${{ github.ref_name }}" == "main" ]]; then
          TAG="${SHA_SHORT}"
        else
          TAG="${{ github.ref_name }}-${SHA_SHORT}"
        fi
        
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "ðŸš€ Deploying to ${{ github.ref_name }} environment"
        echo "ðŸ“¦ Using image tag: ${TAG}"
    
    - name: Update API deployment
      run: |
        porter app update-tag staging --tag "${{ steps.tag.outputs.tag }}"
      env:
        PORTER_TOKEN: ${{ secrets.PORTER_TOKEN }}
        PORTER_HOST: https://dashboard.porter.run
        PORTER_PROJECT: ${{ vars.PORTER_PROJECT }}
        PORTER_CLUSTER: ${{ vars.PORTER_CLUSTER }}
    
    - name: Update Server deployment
      run: |
        porter app update-tag staging-server --tag "${{ steps.tag.outputs.tag }}"
      env:
        PORTER_TOKEN: ${{ secrets.PORTER_TOKEN }}
        PORTER_HOST: https://dashboard.porter.run
        PORTER_PROJECT: ${{ vars.PORTER_PROJECT }}
        PORTER_CLUSTER: ${{ vars.PORTER_CLUSTER }}
    
    - name: Create deployment summary
      run: |
        echo "## ðŸŽ‰ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Tag:** \`${{ steps.tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY