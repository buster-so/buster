

name: Build and Push Server Docker Image

on:
  push:
    branches: [main, staging]
    paths:
      - 'apps/server/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/docker-build-server.yml'

# Only one build per branch at a time, queue others
concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel, queue instead for deployments

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: buster-so/buster-server
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  prepare-metadata:
    runs-on: ubuntu-latest
    outputs:
      sha_short: ${{ steps.meta.outputs.sha_short }}
      tags: ${{ steps.meta.outputs.tags }}
      timestamp: ${{ steps.meta.outputs.timestamp }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract metadata and determine tags
        id: meta
        run: |
          SHA_SHORT=$(git rev-parse --short=7 HEAD)
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT

          if [[ "${{ github.ref_name }}" == "main" ]]; then
            # For main: use commit SHA and latest
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA_SHORT},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          else
            # For all other branches: use staging-SHA and staging
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${SHA_SHORT},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
          fi

          # Set build timestamp
          echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

  build-and-push:
    needs: [prepare-metadata]
    strategy:
      fail-fast: false
      matrix:
        platform: ["amd64"]
        include:
          - platform: amd64
            runner: blacksmith-8vcpu-ubuntu-2404
            docker_platform: linux/amd64
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 35
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-${{ matrix.platform }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.platform }}-pnpm-

      - name: Mount Docker buildkit sticky disk
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-buildkit-cache-${{ github.ref_name }}-${{ matrix.platform }}
          path: /tmp/.buildkit-cache

      - name: Set up Docker Builder
        uses: useblacksmith/setup-docker-builder@v1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare platform-specific tags
        id: platform-tags
        run: |
          # Convert comma-separated tags to newline-separated with platform suffix
          TAGS="${{ needs.prepare-metadata.outputs.tags }}"
          PLATFORM_TAGS=""
          for TAG in ${TAGS//,/ }; do
            if [ -n "$PLATFORM_TAGS" ]; then
              PLATFORM_TAGS="${PLATFORM_TAGS},"
            fi
            PLATFORM_TAGS="${PLATFORM_TAGS}${TAG}-${{ matrix.platform }}"
          done
          echo "tags=${PLATFORM_TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: useblacksmith/build-push-action@v2
        timeout-minutes: 20
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: ${{ steps.platform-tags.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ needs.prepare-metadata.outputs.timestamp }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
          build-args: |
            COMMIT_SHA=${{ needs.prepare-metadata.outputs.sha_short }}
            BUILD_DATE=${{ needs.prepare-metadata.outputs.timestamp }}
          secrets: |
            turbo_token=${{ secrets.TURBO_TOKEN }}
            turbo_team=${{ vars.TURBO_TEAM }}
          platforms: ${{ matrix.docker_platform }}
          cache-from: type=local,src=/tmp/.buildkit-cache
          cache-to: type=local,dest=/tmp/.buildkit-cache,mode=max

  create-manifest:
    needs: [prepare-metadata, build-and-push]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # Parse tags from prepare-metadata output
          TAGS="${{ needs.prepare-metadata.outputs.tags }}"

          for TAG in ${TAGS//,/ }; do
            echo "Creating manifest for $TAG"
            # AMD64 only for all branches
            docker buildx imagetools create -t $TAG \
              ${TAG}-amd64
          done

      - name: Output image details
        run: |
          echo "âœ… Docker image built and pushed successfully!"
          echo "ðŸ“¦ Image tags:"
          echo "${{ needs.prepare-metadata.outputs.tags }}" | tr ',' '\n' | sed 's/^/   - /'
          echo ""
          echo "ðŸ”§ To use in Porter:"
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "   Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare-metadata.outputs.sha_short }}"
          else
            echo "   Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ needs.prepare-metadata.outputs.sha_short }}"
          fi
