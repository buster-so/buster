name: Build and Push Server Docker Image

on:
  push:
    branches: [main, staging]
    paths:
      - 'apps/server/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/docker-build-server.yml'
      - '.github/workflows/deploy.yml'

# Only one build per branch at a time, queue others
concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: false  # Don't cancel, queue instead for deployments

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: buster-so/buster-server

jobs:
  build-and-push:
    runs-on: blacksmith-8vcpu-ubuntu-2404
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure pnpm for linux-x64-glibc
        run: |
          echo "⚙️  Configuring pnpm for linux-x64-glibc architecture..."
          echo "# Target: Debian-based Docker image (oven/bun:1.2.21-debian)" > .npmrc
          echo "# This ensures Sharp installs linux-x64-glibc native binaries" >> .npmrc
          echo "supportedArchitectures[os][]=linux" >> .npmrc
          echo "supportedArchitectures[cpu][]=x64" >> .npmrc
          echo "supportedArchitectures[libc][]=glibc" >> .npmrc
          echo "" >> .npmrc
          echo "# CRITICAL: Include optional dependencies (Sharp platform binaries)" >> .npmrc
          echo "optional=true" >> .npmrc
          echo ""
          echo "Configuration:"
          cat .npmrc

      - name: Setup Node Environment
        uses: ./.github/actions/setup-node-env
        with:
          install-filter: "@buster-app/server..."
          cache-key: docker-build-server

      - name: Mount Turbo cache sticky disk
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-turbo-cache-${{ github.ref_name }}
          path: ./.turbo
      
      - name: Mount Docker buildkit sticky disk
        uses: useblacksmith/stickydisk@v1
        with:
          key: ${{ github.repository }}-buildkit-cache-${{ github.ref_name }}
          path: /tmp/.buildkit-cache
      
      - name: Build with Turbo
        run: |
          echo "🔨 Building server with Turbo..."
          # Build with optimized settings for Docker
          pnpm turbo run build --filter=@buster-app/server...
          echo "✅ Build complete!"
        env:
          NODE_ENV: production
          DOCKER_BUILD: true
          CI: true
          TURBO_CACHE_DIR: .turbo
          TURBO_TELEMETRY_DISABLED: 1
      
      - name: Build server bundle
        run: |
          echo "📦 Creating server bundle with bun..."
          cd apps/server
          bun build src/index.ts --outdir ./dist --target bun --external sharp --external pino-pretty --external @duckdb/node-bindings --external @duckdb/node-bindings-linux-arm64 --external @duckdb/node-bindings-darwin-arm64 --external @duckdb/node-bindings-darwin-x64 --external @duckdb/node-bindings-win32-x64 --external playwright-core --external playwright --external electron --external chromium-bidi --external @vitest/* --external vitest
          ls -la dist/
          cd ../..
      
      - name: Prepare production dependencies
        run: |
          echo "🧹 Preparing production-only dependencies..."
          # Create a temporary directory for production deps
          mkdir -p /tmp/prod-deps/apps/server
          cp package.json pnpm-lock.yaml pnpm-workspace.yaml .npmrc /tmp/prod-deps/
          cp -r packages /tmp/prod-deps/
          cp -r apps /tmp/prod-deps/

          # Install production dependencies with correct architecture (using .npmrc from workspace)
          cd /tmp/prod-deps
          pnpm install --prod

          # Install Sharp with linux-x64 binaries directly - simple and reliable!
          echo ""
          echo "📦 Installing Sharp with linux-x64-glibc binaries for production..."
          npm install --no-save --cpu=x64 --os=linux --libc=glibc \
            sharp@^0.34.4 \
            @img/sharp-linux-x64@^0.34.4 \
            @img/sharp-libvips-linux-x64@^1.2.3

          echo "✅ Sharp installed for production"

          # Copy back to workspace
          cd -
          mkdir -p docker-context
          cp -r /tmp/prod-deps/node_modules docker-context/
          cp -r apps/server/dist docker-context/
          cp apps/server/package.json docker-context/

      - name: Verify Sharp in production node_modules
        run: |
          echo "🔍 Final verification of Sharp in docker-context..."

          # Check if Sharp exists
          if [ ! -d "docker-context/node_modules/sharp" ]; then
            echo "❌ ERROR: Sharp package NOT found in docker-context/node_modules!"
            exit 1
          fi

          echo "✅ Sharp package found in docker-context"

          # Check for Sharp platform binaries (may be symlinks)
          echo ""
          echo "📦 Checking Sharp platform packages..."
          if [ -d "docker-context/node_modules/@img/sharp-linux-x64" ] || [ -L "docker-context/node_modules/@img/sharp-linux-x64" ]; then
            echo "✅ @img/sharp-linux-x64 found"
            ls -la docker-context/node_modules/@img/sharp-linux-x64
          else
            echo "❌ @img/sharp-linux-x64 NOT found"
          fi

          if [ -d "docker-context/node_modules/@img/sharp-libvips-linux-x64" ] || [ -L "docker-context/node_modules/@img/sharp-libvips-linux-x64" ]; then
            echo "✅ @img/sharp-libvips-linux-x64 found"
            ls -la docker-context/node_modules/@img/sharp-libvips-linux-x64
          else
            echo "❌ @img/sharp-libvips-linux-x64 NOT found"
          fi

          # Check for .node binaries
          echo ""
          echo "🔍 Checking for native binaries (.node files)..."
          if find -L docker-context/node_modules/@img/sharp-linux-x64 -name "*.node" -type f 2>/dev/null | grep -q .; then
            echo "✅ Native binaries found:"
            find -L docker-context/node_modules/@img/sharp-linux-x64 -name "*.node" -type f
            find -L docker-context/node_modules/@img/sharp-libvips-linux-x64 -name "*.node" -type f 2>/dev/null || true
          else
            echo "❌ ERROR: No native binaries (.node files) found!"
            exit 1
          fi

          echo ""
          echo "✅ Sharp verification complete - all required files present"

      - name: Set up Docker Builder
        uses: useblacksmith/setup-docker-builder@v1
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata and determine tags
        id: meta
        run: |
          SHA_SHORT=$(git rev-parse --short=7 HEAD)
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            # For main: use commit SHA and latest
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${SHA_SHORT},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "staging" ]]; then
            # For staging: use staging-SHA and staging
            echo "tags=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${SHA_SHORT},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging" >> $GITHUB_OUTPUT
          fi
          
          # Set build timestamp
          echo "timestamp=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
      
      - name: Build and push Docker image
        uses: useblacksmith/build-push-action@v2
        with:
          context: ./docker-context
          file: ./apps/server/Dockerfile.prebuilt
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.timestamp }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
          build-args: |
            COMMIT_SHA=${{ steps.meta.outputs.sha_short }}
            BUILD_DATE=${{ steps.meta.outputs.timestamp }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildkit-cache
          cache-to: type=local,dest=/tmp/.buildkit-cache,mode=max
      
      - name: Output image details
        run: |
          echo "✅ Docker image built and pushed successfully!"
          echo "📦 Image tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/   - /'
          echo ""
          echo "🔧 To use in Porter:"
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "   Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_short }}"
          else
            echo "   Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ steps.meta.outputs.sha_short }}"
          fi