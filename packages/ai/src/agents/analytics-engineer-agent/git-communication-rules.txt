## General Git Environment Communication Rule

### The Golden Rule: PR Comments Are Your ONLY Communication Channel

**When working in ANY git/GitHub environment (Actions, CI, automation), assume the user CANNOT see your regular output.**

The ONLY reliable way to communicate is through `gh pr comment`.

### Universal Communication Guidelines

#### Always Comment When Working on a PR
If you're working on an existing PR:
- ‚úÖ Post comments to communicate progress, findings, and results
- ‚úÖ Keep your final response concise (just status/confirmation)
- ‚úÖ Put verbose details, analysis, and explanations in PR comments
- ‚ùå Never assume the user sees your regular output

#### Always Respond to User PR Comments
If the user comments on a PR you're working on:
- ‚úÖ Read and understand their comment
- ‚úÖ Respond directly via another PR comment
- ‚úÖ Address their questions, concerns, or requests
- ‚úÖ Acknowledge their feedback and explain your actions
- ‚ùå Never ignore or "respond" through invisible output

#### When to Create a PR (Push Events)
- ‚úÖ Create PR + comment if you made changes
- ‚ùå Do NOT create PR if no changes needed (nothing to communicate)
- When PR created, post initial summary comment explaining the changes

### Response Structure in Git Environments

**Your final response to the system:**
```
‚úÖ Work completed and pushed to PR #123
Summary comment posted with full details.
```

**The actual communication (PR comment):**
```markdown
## ü§ñ Documentation Update Complete

### Changes Made
[detailed explanation of work]

### Analysis
[verbose findings and insights]

### Files Modified
[comprehensive file list with links]

### Next Steps
[recommendations and actions]
```

**Remember**: The PR comment is your ACTUAL communication with the user. Your final response is just for the system/logs.

### Comment Timing

**For existing PRs:**
- Post a final summary comment when work is complete
- Post intermediate comments only if:
  - Explicitly requested in task
  - Asking user for clarification/decisions
  - Reporting blocking issues that need attention
  - Responding to user's comment on the PR

**For new PRs (push events):**
- Post initial comment immediately after creating PR
- Include full context since this is the user's first notification

### Comment Content Guidelines

**Be comprehensive in comments:**
- Include analysis, findings, and reasoning
- Add evidence (row counts, null rates, validation results)
- Link to modified files and specific line changes
- Provide context for decisions made
- Suggest next steps or actions

**Be concise in final response:**
- Just confirm what was done
- Reference the PR number
- No need to repeat details (they're in the comment)

### Examples

#### Good: Responding to User Comment on PR
```markdown
## Response to Your Feedback

Thanks for catching that! You're right that the `customer_id` test was too strict.

### Changes Made
- ‚úÖ Relaxed `not_null` test on `customer_id` to allow expected guest orders
- ‚úÖ Added comment documenting that ~8% guest orders are expected
- ‚úÖ Updated test to use `where: order_type != 'guest'`

### Validation
Ran query confirming 8.2% of orders have `null customer_id` and all have `order_type = 'guest'`.

Changes pushed to this PR - tests should pass now!
```

#### Good: Creating PR with Initial Comment
```markdown
## ü§ñ Automated Documentation Update

This PR adds documentation and tests for newly modified models in `models/marts/core/`.

### Models Documented
- ‚úÖ `orders` - Added grain, column descriptions, and relationship tests
- ‚úÖ `customers` - Added not_null tests and business context

### Tests Added
- 3 relationship tests (orders ‚Üí customers, line_items, payments)
- 5 not_null tests on primary/foreign keys
- 1 accepted_values test for order_status

### Evidence
- Profiled 2.8M orders (2025-01-15 14:23 UTC)
- Validated relationships: 96% coverage on customer_id
- All tests validated with `dbt compile`

Ready for review!
```

#### Bad: Only Using Final Response (User Sees Nothing)
```
I've completed the documentation for the orders model. I found that there are 
2.8M rows and about 8% have null customer_id which makes sense for guest orders.
I've added all the appropriate tests and validated the relationships.
[User never sees this! ‚ùå]
```