Creates metric configuration files with YAML content following the metric schema specification. Before using this tool, carefully consider the appropriate visualization type (bar, line, scatter, pie, combo, metric, table) and its specific configuration requirements. Each visualization has unique axis settings, formatting options, and data structure needs that must be thoroughly planned to create effective metrics. **This tool supports creating multiple metrics in a single call; prefer using bulk creation over creating metrics one by one.**

Only utilize the required/default fields unless the user specifically requests that optional fields be added.

## Dynamic Filters

- Declare filters inside the `filters` array. Each filter entry maps directly to a `{{key}}` token in your SQL and should include:
  - `key`: Identifier that also appears in SQL as `{{key}}`.
  - `column`: Approved SQL column or expression. Can use qualified column names with table aliases (e.g., `o.order_date`, `c.customer_id`, `orders.status`). May be empty when the mode supplies the expression.
  - `type`: One of `string`, `number`, `boolean`, `string_list`, `number_list`, `date`, `timestamp`, `daterange`, `timestamp_range`.
  - `op` (optional): Comparison operator (`=`, `!=`, `>`, `>=`, `<`, `<=`, `like`, `ilike`). Defaults to `=`.
  - `required` (optional): `true` if the metric cannot run without a value. Required filters must provide a `default`.
  - `null_behavior` (optional): `omit` (default) or `no_op`.
  - `validate` (optional): Constraints such as `{ enum: ["US", "CA"], regex: "^[A-Z]{2}$" }`.
  - `mode`: Controls how the fragment renders (`predicate`, `range`, `in_list`, `join_predicate`, `partition_by`, `qualify`, `having`, `order_by_item`, `select_expr`, `limit`, `predicate_switch`, `predicate_complex`).
  - `needsLeadingAnd` (optional): Override the default `AND` prefix behaviour for predicate-style modes.
  - `default` (optional): The runtime default used during validation when no user input is supplied (for example `default: 10`, `default: ["2025-01-01", "2025-02-01"]`).

- All metric SQL must support dynamic filters through explicit brace tokens placed exactly where runtime fragments belong.
- A single filter key can map to multiple tokens (for example reuse `region` across CTE and outer query). Each placement must produce a unique parameter namespace derived from `<slot>` and `<key>`.
- All metric SQL must support dynamic filters through explicit brace tokens placed exactly where runtime fragments belong. Use `{{key}}` that matches the filter definition.
- Place tokens exactly where fragments must render: inside `WHERE`, `JOIN ON`, window `PARTITION BY`, `QUALIFY`, `HAVING`, `ORDER BY`, or `LIMIT` clauses.
- Avoid nullable-parameter OR patterns unless explicitly required; prefer omitting predicates when filters are missing.

- Place tokens exactly where fragments must render: inside `WHERE`, `JOIN ON`, window `PARTITION BY`, `QUALIFY`, `HAVING`, `ORDER BY`, or `LIMIT` clauses.
- LIST filters should expand according to warehouse:
  - Postgres: `= ANY(:param)`.
  - BigQuery: `IN UNNEST(@param)`.
  - Snowflake: `IN (SELECT value::variant FROM TABLE(FLATTEN(input => PARSE_JSON(:param))))`.
- Window partition tokens should render the full comma-separated list (with trailing comma/space when required) or nothing.
- LIMIT tokens should expand to a single bound parameter (no leading `AND`), for example `LIMIT :limit_rows_limit`.

## COMPLETE METRIC YAML SCHEMA SPECIFICATION

```
# METRIC CONFIGURATION - YML STRUCTURE
# -------------------------------------
# REQUIRED Top-Level Fields: `name`, `description`, `timeFrame`, `sql`, `chartConfig`
#
# --- FIELD DETAILS & RULES --- 
# `name`: Human-readable title (e.g., Total Sales). 
#   - RULE: CANNOT contain underscores (`_`). Use spaces instead.   
# `description`: Detailed explanation of the metric. 
# `timeFrame`: Human-readable time period covered by the query, similar to a filter in a BI tool. MUST BE A VALID STRING. 
#   - If doing 2024 as an example, you must do "2024" can't parse as a number.
#   - For queries with fixed date filters, use specific date ranges, e.g., "January 1, 2020 - December 31, 2020", "2024", "Q2 2024", "June 1, 2025".
#   - For queries with relative date filters or no date filter, use relative terms, e.g., "Today", "Yesterday", "Last 7 days", "Last 30 days", "Last Quarter", "Last 12 Months", "Year to Date", "All time", etc.
#   - For comparisons, use "Comparison - [Period 1] vs [Period 2]", with each period formatted according to whether it is fixed or relative, e.g., "Comparison - Last 30 days vs Previous 30 days" or "Comparison - June 1, 2025 - June 30, 2025 vs July 1, 2025 - July 31, 2025".
#   Rules:
#     - Must accurately reflect the date/time filter used in the `sql` field. Do not misrepresent the time range.
#     - Use full month names for dates, e.g., "January", not "Jan".
#     - Follow general quoting rules. CANNOT contain ':'.
#   Note: Respond only with the time period, without explanation or additional copy.
# `sql`: The SQL query for the metric.
#   - RULE: MUST use the pipe `|` block scalar style to preserve formatting and newlines.
#   - NOTE: Remember to use fully qualified names: DATABASE_NAME.SCHEMA_NAME.TABLE_NAME for tables and table_alias.column for columns. This applies to all table and column references, including those within Common Table Expressions (CTEs) and when selecting from CTEs.
#   - Example:
#     sql: |
#       SELECT ... 
# `chartConfig`: Visualization settings.
#   - RULE: Must contain `selectedChartType` (bar, line, scatter, pie, combo, metric, table).
#   - RULE: Must contain `columnLabelFormats` defining format for ALL columns in the SQL result.
#   - RULE: Must contain ONE chart-specific config block based on `selectedChartType`:
#     - `barAndLineAxis` (for type: bar, line)
#     - `scatterAxis` (for type: scatter)
#     - `pieChartAxis` (for type: pie)
#     - `comboChartAxis` (for type: combo)
#     - `metricColumnId` (for type: metric)
#     - `tableConfig` (for type: table) - [Optional, if needed beyond basic columns]
#
# --- GENERAL YAML RULES ---
# 1. Use standard YAML syntax (indentation, colons for key-value, `-` for arrays).
# 2. Quoting: Generally avoid quotes for simple strings. Use double quotes (`"..."`) ONLY if a string contains special characters (like :, {, }, [, ], ,, &, *, #, ?, |, -, <, >, =, !, %, @, `) or needs to preserve leading/trailing whitespace. 
# 3. Metric name, timeframe, or description CANNOT contain `:`
# -------------------------------------

# --- COLUMN LABEL FORMATS ---
# columnLabelFormats is REQUIRED for ALL columns in your SQL result.
# This section defines how each column should be formatted and displayed.
#
# REQUIRED fields for each column:
#   - columnType: Must be one of: number, text, date
#   - style: Must match columnType:
#     - For number: currency, percent, number
#     - For text: string
#     - For date: date
#   - replaceMissingDataWith: Value when data is missing (0 for numbers, null for others)
#   - numberSeparatorStyle: Either ',' or null (not "null" in quotes)
#
# OPTIONAL fields:
#   - displayName: Custom display name for the column
#   - multiplier: Value to multiply numbers by (default: 1)
#     - For percentages from database columns: use 1
#     - For calculated percentages not already multiplied by 100: use 100
#   - minimumFractionDigits: Min decimal places to show
#   - maximumFractionDigits: Max decimal places to show
#   - prefix: Text to show before the value
#   - compactNumbers: Show as 1K, 1M, etc. (boolean)
#   - currency: Currency code for currency style (e.g., USD, EUR)
#   - dateFormat: Format string for dates (Day.js compatible)
#     - year: 'YYYY' (e.g., 2025)
#     - quarter: '[Q]Q YYYY' (e.g., Q1 2025)
#     - month: 'MMM YYYY' (e.g., Jan 2025)
#     - week/day: 'MMM D, YYYY' (e.g., Jan 25, 2025)
#   - useRelativeTime: Show dates as "2 days ago" (boolean)
#   - isUTC: Interpret dates as UTC (boolean)
#   - convertNumberTo: Convert numbers to time units (day_of_week, month_of_year, quarter)
#   - makeLabelHumanReadable: Whether to make labels human readable (boolean, default: true)
#
# Example columnLabelFormats:
#   columnLabelFormats:
#     total_sales:
#       columnType: number
#       style: currency
#       replaceMissingDataWith: 0
#       numberSeparatorStyle: ','
#       currency: USD
#       displayName: Total Sales
#     order_date:
#       columnType: date
#       style: date
#       replaceMissingDataWith: null
#       numberSeparatorStyle: null
#       dateFormat: MMM D, YYYY
#     product_name:
#       columnType: text
#       style: string
#       replaceMissingDataWith: null
#       numberSeparatorStyle: null
#     profit_margin:
#       columnType: number
#       style: percent
#       replaceMissingDataWith: 0
#       numberSeparatorStyle: ','
#       multiplier: 100  # Use 100 if SQL returns 0.75 for 75%; use 1 if SQL returns 75 for 75%
#       minimumFractionDigits: 1
#       maximumFractionDigits: 2
#
# DATE NUMBER HANDLING RULES (IMPORTANT)
#   - Whenever a column represents a date part but is typed as a number (month, quarter, day_of_week), you MUST set:
#     columnType: number
#     style: date
#   - Always use convertNumberTo to translate raw numbers into readable time units:
#     - month → convertNumberTo: month_of_year
#     - quarter → convertNumberTo: quarter
#     - day_of_week → convertNumberTo: day_of_week
#   - Always set makeLabelHumanReadable: true for these.
#   - NEVER leave raw numbers on the axis.
#
# DATE PART RULES
#   - year → columnType: number, style: number, numberSeparatorStyle: null (no thousands separators).
#   - second → columnType: number, style: number, numberSeparatorStyle: null
#   - minute → columnType: number, style: number, numberSeparatorStyle: null
#   - hour → columnType: number, style: number, numberSeparatorStyle: null
#   - month/quarter/day_of_week → columnType: number, style: date, with convertNumberTo + makeLabelHumanReadable.
#   - When X-axis = [month, year] across multiple years → month.dateFormat: 'MMM' (renderer composes 'MMM YYYY' with the year part).
#   - Full date/timestamp columns → columnType: date, style: date, include explicit dateFormat appropriate to the interval.

# -------------------------------------

# --- FORMAL SCHEMA --- (Used for validation, reflects rules above)
type: object
name: Metric Configuration Schema
description: Metric definition with SQL query and visualization settings

properties:
  # NAME
  name:
    required: true
    type: string
    description: Human-readable title (e.g., Total Sales). NO underscores. Follow quoting rules. Should not contain `:`

  # DESCRIPTION
  description:
    required: true
    type: string
    description: |
      A natural language description of the metric, essentially rephrasing the 'name' field as a question or statement. 
      Example: If name is "Total Sales", description could be "What are the total sales?".
      RULE: Should NOT describe the chart type, axes, or any visualization aspects.
      RULE: Follow general quoting rules. 
      RULE: Should not contain ':'.

  # TIME FRAME
  timeFrame:
    required: true
    type: string
    description: |
      Human-readable time period covered by the SQL query, similar to a filter in a BI tool.

      ## CRITICAL RULES
      - Each metric/visualization should have its own unique timeframe string based on the date filters used in the metric's `sql` field
      - The timeframe must be derived directly and only from that metric’s `sql` field.
      - Never generalize across metrics or apply a “one size fits all” timeframe for multiple charts. If charts are on the same report or dashboard but utilize different date filters, you must display the correct timeFrame for each metric/visualization.
      - Must accurately reflect both the date filters and the grouping granularity used in the SQL.

      ## Allowed Formats
      - Fixed Dates: "January 1, 2020 - December 31, 2020", "2024", "Q2 2024", "June 1, 2025"
      - Relative Dates: "Today", "Yesterday", "Last 7 days", "Last 30 days", "Last Quarter", 
        "Last 12 Months", "Year to Date", "Quarter to Date", "Month to Date", "Week to Date", "All time"
      - Comparisons: "Comparison - [Period 1] vs [Period 2]"
        Examples:
          - "Comparison - Last 30 days vs Previous 30 days"
          - "Comparison - Last 12 Months vs Previous 12 Months"
          - "Comparison - June 1, 2025 - June 30, 2025 vs July 1, 2025 - July 31, 2025"
      - Fiscal Periods: "FY2024", "FQ3 2024"
      - Forecast/Future: "Next 12 Months", "Next Quarter"

      ## Edge Case Rules
      - **Incomplete start date only** (`WHERE date >= '2023-01-01'`) → "Since January 1, 2023"
      - **Incomplete end date only** (`WHERE date <= '2024-06-30'`) → "Through June 30, 2024"
      - **Current partial period** (`WHERE YEAR(order_date) = 2024` during 2024) → "Year to Date"
      - **Custom rolling windows** (`WHERE date >= CURRENT_DATE - INTERVAL '90 days'`) → "Last 90 days"
      - **Future projections** (`WHERE date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '12 months'`) → "Next 12 Months"
      - **Short fixed spans** (3 months of data: Jan–Mar 2025) → "January 2025 - March 2025"
      - **Fiscal calendar filters** (`WHERE fiscal_quarter = 'FQ3 2024'`) → "FQ3 2024"
      - **Rolling to-date filters** (`DATE_TRUNC('quarter', CURRENT_DATE)`) → "Quarter to Date"
      - **Relative offsets** (`WHERE date BETWEEN CURRENT_DATE - INTERVAL '60 days' AND CURRENT_DATE - INTERVAL '30 days'`) → "30–60 Days Ago"

      ## Formatting Rules
      - Always use full month names ("January", not "Jan").
      - Do not include ":" inside the timeframe string.
      - Timeframe string must match SQL exactly (filters and grouping).
      - Never reuse the same timeframe across unrelated metrics unless the SQL is identical.

      ## Examples
      - Query grouped by month, filtered last 12 months → "Last 12 Months"
      - Query grouped by quarter, filtered current year → "Q1 2025 - Q3 2025"
      - Query with WHERE order_date BETWEEN '2021-01-01' AND '2021-12-31' → "January 1, 2021 - December 31, 2021"
      - Query with no date filter → "All time"
      - Comparison of rolling periods → "Comparison - Last 30 days vs Previous 30 days"
      - Open-ended filter (`>= 2023-01-01`) → "Since January 1, 2023"
      - Forecasting 1 year ahead → "Next 12 Months"
      - Fiscal quarter filter → "FQ3 2024"

  # SQL QUERY
  sql:
    required: true
    type: string
    description: |
      SQL query using YAML pipe syntax (|).
      The SQL query should be formatted with proper indentation using the YAML pipe (|) syntax.
      This ensures the multi-line SQL is properly parsed while preserving whitespace and newlines.
      IMPORTANT: Remember to use fully qualified names: DATABASE_NAME.SCHEMA_NAME.TABLE_NAME for tables and table_alias.column for columns. This rule is critical for all table and column references, including those within Common Table Expressions (CTEs) and when selecting from CTEs.
      Example:
        sql: |
          SELECT column1, column2
          FROM my_table
          WHERE condition;

  # CHART CONFIGURATION
  chartConfig:
    required: true
    description: Visualization settings (must include selectedChartType, columnLabelFormats, and ONE chart-specific block)
    allOf: # Base requirements for ALL chart types
      - \$ref: '#/definitions/base_chart_config'
    oneOf: # Specific block required based on type 
      - \$ref: #/definitions/bar_line_chart_config
      - \$ref: #/definitions/scatter_chart_config
      - \$ref: #/definitions/pie_chart_config
      - \$ref: #/definitions/combo_chart_config
      - \$ref: #/definitions/metric_chart_config
      - \$ref: #/definitions/table_chart_config

required:
  - name
  - timeFrame
  - sql
  - chartConfig

definitions:
  # BASE CHART CONFIG (common parts used by ALL chart types)
  base_chart_config:
    type: object
    properties:
      selectedChartType:
        type: string
        description: Chart type (bar, line, scatter, pie, combo, metric, table)
        enum: [bar, line, scatter, pie, combo, metric, table]
      columnLabelFormats:
        type: object
        description: REQUIRED formatting for ALL columns returned by the SQL query.
        additionalProperties:
          \$ref: #/definitions/column_label_format
      # Optional base properties below
      columnSettings:
        type: object
        description: |-
          Visual settings applied per column. 
          Keys MUST be LOWERCASE column names from the SQL query results. 
          Example: `total_sales: { showDataLabels: true }`
        additionalProperties:
          \$ref: #/definitions/column_settings
      colors:
        type: array
        items:
          type: string
        description: |
          Default color palette. 
          RULE: Hex color codes (e.g., #FF0000) MUST be enclosed in quotes (e.g., "#FF0000" or '#FF0000') because '#' signifies a comment otherwise. Double quotes are preferred for consistency.
          You should never return/edit this field unless the user or dataset documentation explicitly ask you to customize chart colors.
      showLegend:
        type: boolean
      gridLines:
        type: boolean
      showLegendHeadline:
        oneOf:
          - type: boolean
            enum: [false]
          - type: string
            enum: [current, average, total, median, min, max]
        description: Show headline in legend. Default: false
      goalLines:
        type: array
        items:
          \$ref: #/definitions/goal_line
      trendlines:
        type: array
        items:
          \$ref: #/definitions/trendline
      disableTooltip:
        type: boolean
      # Axis Configurations
      # RULE: By default, only add `xAxisConfig` and ONLY set its `xAxisTimeInterval` property 
      #       when visualizing date/time data on the X-axis (e.g., line, bar, combo charts). 
      #       Do NOT add other `xAxisConfig` properties, `yAxisConfig`, or `y2AxisConfig` 
      #       unless the user explicitly asks for specific axis modifications.
      xAxisConfig:
        description: Controls X-axis properties. For date/time axes, MUST contain `xAxisTimeInterval` (day, week, month, quarter, year). Other properties control label visibility, title, rotation, and zoom. Only add when needed (dates) or requested by user.
        \$ref: '#/definitions/x_axis_config'
      yAxisConfig:
        description: Controls Y-axis properties. Only add if the user explicitly requests Y-axis modifications (e.g., hiding labels, changing title). Properties control label visibility, title, rotation, and zoom.
        \$ref: '#/definitions/y_axis_config'
      y2AxisConfig:
        description: Controls secondary Y-axis (Y2) properties, primarily for combo charts. Only add if the user explicitly requests Y2-axis modifications. Properties control label visibility, title, rotation, and zoom.
        \$ref: '#/definitions/y2_axis_config'
      categoryAxisStyleConfig:
        description: Optional style configuration for the category axis (color/grouping).
        \$ref: '#/definitions/category_axis_style_config'
    required:
      - selectedChartType
      - columnLabelFormats

  # AXIS CONFIGURATIONS
  x_axis_config:
    type: object
    properties:
      xAxisTimeInterval:
        type: string
        enum: [day, week, month, quarter, year, 'null']
        description: REQUIRED time interval for grouping date/time values on the X-axis (e.g., for line/combo charts). MUST be set if the X-axis represents time. Default: null.
      xAxisShowAxisLabel:
        type: boolean
        description: Show X-axis labels. Default: true.
      xAxisShowAxisTitle:
        type: boolean
        description: Show X-axis title. Default: true.
      xAxisAxisTitle:
        type: [string, 'null']
        description: X-axis title. Default: null (auto-generates from column names).
      xAxisLabelRotation:
        type: string # Representing numbers or 'auto'
        enum: [0, 45, 90, auto]
        description: Label rotation. Default: auto.
      xAxisDataZoom:
        type: boolean
        description: Enable data zoom on X-axis. Default: false (User only).
    additionalProperties: false
    required:
      - xAxisTimeInterval

  y_axis_config:
    type: object
    properties:
      yAxisShowAxisLabel:
        type: boolean
        description: Show Y-axis labels. Default: true.
      yAxisShowAxisTitle:
        type: boolean
        description: Show Y-axis title. Default: true.
      yAxisAxisTitle:
        type: [string, 'null']
        description: Y-axis title. Default: null (uses first plotted column name).
      yAxisStartAxisAtZero:
        type: [boolean, 'null']
        description: Start Y-axis at zero. Default: true.
      yAxisScaleType:
        type: string
        enum: [log, linear]
        description: Scale type for Y-axis. Default: linear.
    additionalProperties: false

  y2_axis_config:
    type: object
    description: Secondary Y-axis configuration (for combo charts).
    properties:
      y2AxisShowAxisLabel:
        type: boolean
        description: Show Y2-axis labels. Default: true.
      y2AxisShowAxisTitle:
        type: boolean
        description: Show Y2-axis title. Default: true.
      y2AxisAxisTitle:
        type: [string, 'null']
        description: Y2-axis title. Default: null (uses first plotted column name).
      y2AxisStartAxisAtZero:
        type: [boolean, 'null']
        description: Start Y2-axis at zero. Default: true.
      y2AxisScaleType:
        type: string
        enum: [log, linear]
        description: Scale type for Y2-axis. Default: linear.
    additionalProperties: false

  category_axis_style_config:
    type: object
    description: Style configuration for the category axis (color/grouping).
    properties:
      categoryAxisTitle:
        type: [string, 'null']
        description: Title for the category axis.
    additionalProperties: false

  # COLUMN FORMATTING
  column_label_format:
    type: object
    properties:
      columnType:
        type: string
        description: number, text, date
        enum: [number, text, date]
      style:
        type: string
        enum:
          - currency # Note: The "$" sign is automatically prepended.
          - percent # Note: "%" sign is automatically appended as a suffix.
            # IMPORTANT: You MUST analyze the SQL query to determine the correct multiplier:
            # - If SQL returns decimal ratios (e.g., 0.75 for 75%), use multiplier: 100
            # - If SQL returns percentage values (e.g., 75 for 75%), use multiplier: 1 (or omit it)
          - number
          - date # Note: For date columns, consider setting xAxisTimeInterval in xAxisConfig to control date grouping (day, week, month, quarter, year) if using the convertNumberTo field, you must also set the style to date.
          - string
      multiplier:
        type: number
        description: |
          Value to multiply the number by before display. Default: 1.
          For percentages with style: percent, you MUST examine the SQL query and data format:
          - If SQL returns decimal ratios (e.g., 0.75), use multiplier: 100 to convert to percentage (75%)
          - If SQL returns percentage values (e.g., 75), use multiplier: 1 or omit this field
          The agent must analyze the actual SQL query and understand the data format, not make assumptions.
      displayName:
        type: string
        description: Custom display name for the column
      numberSeparatorStyle:
        type: string
        description: Style for number separators. Your option is ',' or a null value.  Not null wrapped in quotes, a null value.
      minimumFractionDigits:
        type: integer
        description: Minimum number of fraction digits to display
      maximumFractionDigits:
        type: integer
        description: Maximum number of fraction digits to display
      prefix:
        type: string
      suffix:
        type: string
      replaceMissingDataWith:
        type: number
        description: Value to display when data is missing, needs to be set to 0. Should only be set on number columns. All others should be set to null.
      compactNumbers:
        type: boolean
        description: Whether to display numbers in compact form (e.g., 1K, 1M)
      currency:
        type: string
        description: Currency code for currency formatting (e.g., USD, EUR)
      dateFormat:
        type: string
        description: |
          Format string for date display (must be compatible with Day.js format strings). 
          RULE: Choose format based on xAxisTimeInterval:
            - year: 'YYYY' (e.g., 2025)
            - quarter: '[Q]Q YYYY' (e.g., Q1 2025)
            - month: 'MMM YYYY' (e.g., Jan 2025) or 'MMMM' (e.g., January) if context is clear.
            - week/day: 'MMM D, YYYY' (e.g., Jan 25, 2025) or 'MMM D' (e.g., Jan 25) if context is clear.
      useRelativeTime:
        type: boolean
        description: Whether to display dates as relative time (e.g., 2 days ago)
      isUTC:
        type: boolean
        description: Whether to interpret dates as UTC
      convertNumberTo:
        type: string
        description: Optional. Convert numeric values to time units or date parts.  This is a necessity for time series data when numbers are passed instead of the date. If using this, the style must be set as date.
        enum:
          - day_of_week
          - month_of_year
          - quarter
      makeLabelHumanReadable:
        type: boolean
        description: Whether to make labels human readable. Default: true

    required:
      - columnType
      - style
      - replaceMissingDataWith
      - numberSeparatorStyle

  # COLUMN VISUAL SETTINGS
  column_settings:
    type: object
    description: Optional visual settings per LOWERCASE column name.
    properties:
      showDataLabels:
        type: boolean
        description: Whether to show data labels on the chart. Default: false
      showDataLabelsAsPercentage:
        type: boolean
        description: Whether to show data labels as percentages. Default: false
      columnVisualization:
        type: string
        enum:
          - bar
          - line
          - dot
        description: Visualization type for the column. Default: bar
      lineWidth:
        type: number
        description: Width of lines (1-20). Default: 2. Only applies to line visualization
      lineStyle:
        type: string
        enum:
          - area
          - line
        description: Style of line (area fills below). Default: line. Only applies to line visualization
      lineType:
        type: string
        enum:
          - normal
          - smooth
          - step
        description: Type of line interpolation. Default: normal. Only applies to line visualization
      lineSymbolSize:
        type: number
        description: |
          Size of symbols on lines or dots.
          - For 'line': Size of dots on line (0-10). Default: 0
          - For 'dot': Size of dots (1-50). Default: 10
      barRoundness:
        type: number
        description: Roundness of bar corners (0-50, where 0 is square, 50 is circular). Default: 8. Only applies to bar visualization

  # CHART-SPECIFIC CONFIGURATIONS
  bar_line_chart_config:
    allOf:
      - \$ref: #/definitions/base_chart_config
      - type: object
        properties:
          selectedChartType:
            enum:
              - bar
              - line
          barAndLineAxis:
            type: object
            properties:
              x:
                type: array
                items:
                  type: string
              y:
                type: array
                items:
                  type: string
                description: LOWERCASE column name from SQL for X-axis.
              category:
                type: array
                items:
                  type: string
                description: |
                  LOWERCASE column name from SQL for category grouping.
                  NOTE: `category` = series grouping (splits into multiple parallel series that align across the X-axis).
                  
                  Category vs ColorBy:
                  - Use CATEGORY: When you want to create multiple series/lines (one per category value). Creates separate data points and enables legend.
                  - Use COLORBY: When you want to apply colors to bars/points based on a column value, but keep them as a single series.
                  
                  Example: Sales by month
                  - With category=['region']: Creates separate lines/bars for each region (North, South, East, West)
                  - With colorBy=['region']: Colors bars by region but keeps them as one series
              tooltip:
                type: [array, 'null']
                items:
                  type: string
                description: Column names for tooltip. If null, y axis is used. Default: null
              colorBy:
                type: [array, 'null']
                items:
                  type: string
                description: |
                  Optional array of column names to apply colors based on column values.
                  NOTE: `colorBy` = color grouping (applies colors within a single series).
                  Use this when you want visual differentiation without creating separate series.
                  Perfect for: Status indicators (red/yellow/green), priority levels, or any categorical color coding.
                  Example: ['region'] - colors bars by region values
                  MUST BE AT SAME LEVEL AS AXIS X, Y
            required:
              - x
              - y
          barLayout:
            type: string
            enum:
              - horizontal
              - vertical
            description: Layout direction. Default: vertical (column chart)
          barGroupType:
            type: string
            enum:
              - stack
              - group
              - percentage-stack
            description: How bars are grouped. Default: group
          barSortBy:
            type: array
            items:
              type: string
              enum:
                - asc
                - desc
                - none
            description: Sort order for bars (primary, secondary). Default: []
          barShowTotalAtTop:
            type: boolean
            description: Show total at top of stacked bars. Default: false
        required:
          - selectedChartType
          - barAndLineAxis

  scatter_chart_config:
    allOf:
      - \$ref: #/definitions/base_chart_config
      - type: object
        properties:
          selectedChartType:
            enum:
              - scatter
          scatterAxis:
            type: object
            properties:
              x:
                type: array
                items:
                  type: string
              y:
                type: array
                items:
                  type: string
              category:
                type: array
                items:
                  type: string
                description: |
                  LOWERCASE column name from SQL for category grouping.
                  Creates separate colored series of points for each category value.
              size:
                type: array
                items:
                  type: string
                description: Column for size (single element array or empty)
              tooltip:
                type: [array, 'null']
                items:
                  type: string
                description: Column names for tooltip. If null, y axis is used. Default: null
              colorBy:
                type: [array, 'null']
                items:
                  type: string
                description: |
                  Optional array of column names to apply colors to scatter points based on column values.
                  Use when you want all points in one series with color-coded differentiation.
                  Example: ['priority'] - colors points by priority values
                  MUST BE AT SAME LEVEL AS AXIS X, Y
            required:
              - x
              - y
        required:
          - selectedChartType
          - scatterAxis

  pie_chart_config:
    allOf:
      - \$ref: #/definitions/base_chart_config
      - type: object
        properties:
          selectedChartType:
            enum:
              - pie
          pieChartAxis:
            type: object
            properties:
              x:
                type: array
                items:
                  type: string
              y:
                type: array
                items:
                  type: string
              tooltip:
                type: [array, 'null']
                items:
                  type: string
                description: Column names for tooltip. If null, y axis is used. Default: null
              colorBy:
                type: [array, 'null']
                items:
                  type: string
                description: |
                  Optional array of column names for pie slice colors based on column values.
                  Allows custom color mapping for specific slice categories.
                  Example: ['category'] - colors slices by category values
                  MUST BE AT SAME LEVEL AS AXIS X, Y
            required:
              - x
              - y
        required:
          - selectedChartType
          - pieChartAxis

  combo_chart_config:
    allOf:
      - \$ref: #/definitions/base_chart_config
      - type: object
        properties:
          selectedChartType:
            enum:
              - combo
          comboChartAxis:
            type: object
            properties:
              x:
                type: array
                items:
                  type: string
              y:
                type: array
                items:
                  type: string
              y2: 
                type: array
                items:
                  type: string
              category:
                type: array
                items:
                  type: string
                description: |
                  LOWERCASE column name from SQL for category grouping.
                  Creates separate series for each category value in combo chart.
              tooltip:
                type: [array, 'null']
                items:
                  type: string
                description: Column names for tooltip. If null, y axis is used. Default: null
              colorBy:
                type: [array, 'null']
                items:
                  type: string
                description: |
                  Optional array of column names to apply colors based on column values in combo chart.
                  Useful for color-coding bars while lines remain as separate series.
                  Example: ['region'] - colors bars by region values
                  MUST BE AT SAME LEVEL AS AXIS X, Y
            required:
              - x
              - y
              - y2
        required:
          - selectedChartType
          - comboChartAxis

  metric_chart_config:
    allOf:
      - \$ref: #/definitions/base_chart_config
      - type: object
        properties:
          selectedChartType:
            enum:
              - metric
          metricColumnId:
            type: string
            description: LOWERCASE column name from SQL for the main metric value.
          metricValueAggregate:
            type: string
            enum:
              - sum
              - average
              - median
              - max
              - min
              - count
              - first
            description: Aggregate function for metric value
          metricHeader:
            oneOf:
              - type: string
                description: Simple string title for the metric header
              - type: object
                properties:
                  columnId:
                    type: string
                    description: Which column to use for the header
                  useValue:
                    type: boolean
                    description: Whether to display the key or the value in the chart
                  aggregate:
                    type: string
                    enum:
                      - sum
                      - average
                      - median
                      - max
                      - min
                      - count
                      - first
                    description: Optional aggregation method, defaults to sum
                required:
                  - columnId
                  - useValue
                description: Configuration for a derived metric header
          metricSubHeader:
            oneOf:
              - type: string
                description: Simple string title for the metric sub-header
              - type: object
                properties:
                  columnId:
                    type: string
                    description: Which column to use for the sub-header
                  useValue:
                    type: boolean
                    description: Whether to display the key or the value in the chart
                  aggregate:
                    type: string
                    enum:
                      - sum
                      - average
                      - median
                      - max
                      - min
                      - count
                      - first
                    description: Optional aggregation method, defaults to sum
                required:
                  - columnId
                  - useValue
                description: Configuration for a derived metric sub-header
        required:
          - selectedChartType
          - metricColumnId

  table_chart_config:
    allOf:
      - \$ref: #/definitions/base_chart_config
      - type: object
        properties:
          selectedChartType:
            enum:
              - table
          tableColumnOrder:
            type: array
            items:
              type: string
        required:
          - selectedChartType
          # No additional required fields for table chart

  # HELPER OBJECTS
  goal_line:
    type: object
    properties:
      show:
        type: boolean
        description: Whether to show the goal line. Default: false
      value:
        type: [number, 'null']
        description: The value for the goal line. Default: null
      showGoalLineLabel:
        type: boolean
        description: Whether to show the goal line label. Default: true
      goalLineLabel:
        type: [string, 'null']
        description: Label text for the goal line. Default: "Goal"
      goalLineColor:
        type: [string, 'null']
        description: Color of the goal line in hex format. Default: "#000000"

  trendline:
    type: object
    properties:
      show:
        type: boolean
        description: Whether to show the trendline. Default: true
      showTrendlineLabel:
        type: boolean
        description: Whether to show the trendline label. Default: true
      trendlineLabel:
        type: [string, 'null']
        description: Label text for the trendline. Default: null
      type:
        type: string
        enum:
          - average
          - linear_regression
          - logarithmic_regression
          - exponential_regression
          - polynomial_regression
          - min
          - max
          - median
        description: Type of trendline. Default: linear_regression
      trendLineColor:
        type: [string, 'inherit']
        description: Color of trendline in hex format or 'inherit' to match series. Default: "#000000"
      columnId:
        type: string
        description: Column ID to apply trendline to
      trendlineLabelPositionOffset:
        type: number
        description: Position of label along trendline (0-100). Default: 85
      projection:
        type: boolean
        description: Whether to project trendline to end of chart. Default: false
      lineStyle:
        type: string
        enum:
          - solid
          - dotted
          - dashed
          - dashdot
        description: Style of trendline. Default: solid
      offset:
        type: number
        description: Vertical offset of the trendline. Default: 0
      polynomialOrder:
        type: number
        description: Order for polynomial regression. Default: 2
      aggregateAllCategories:
        type: boolean
        description: Whether to calculate trendline for all categories. Default: true
      id:
        type: string
        description: Unique identifier for the trendline
    required:
      - type
      - columnId
      - id
```

**CRITICAL:** This is the complete schema specification. Follow it exactly - every property, enum value, and requirement listed above must be respected. Pay special attention to:

1. **Required properties** for each chart type
2. **Enum values** for each field (e.g., selectedChartType, columnType, style)
3. **Column name casing** (must be lowercase in axis configurations)
4. **Complete columnLabelFormats** for every SQL result column
5. **Proper YAML syntax** with pipe (|) for SQL blocks
6. **Chart-specific axis configurations** (barAndLineAxis, scatterAxis, etc.)
7. **Date formatting rules** that match xAxisTimeInterval settings